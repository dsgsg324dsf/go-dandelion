// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// internal/template/boot/boot.tmpl
// internal/template/cmd/apiserver.tmpl
// internal/template/cmd/cobra.tmpl
// internal/template/cmd/rpcserver.tmpl
// internal/template/config/config.tmpl
// internal/template/global/global.tmpl
// internal/template/internal/route.tmpl
// internal/template/internal/rpcapi.tmpl
// internal/template/main.tmpl
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplateBootBootTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x52\x00\xad\xff\x70\x61\x63\x6b\x61\x67\x65\x20\x62\x6f\x6f\x74\x0a\x0a\x66\x75\x6e\x63\x20\x49\x6e\x69\x74\x28\x29\x20\x7b\x0a\x09\x2f\x2f\x20\xe5\xb0\x86\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\x9c\xa8\xe8\xaf\xa5\xe5\xa4\x84\xe6\xb3\xa8\xe5\x86\x8c\x20\x54\x4f\x44\x4f\x0a\x7d\x0a\x01\x00\x00\xff\xff\xa8\x42\xb5\x5d\x52\x00\x00\x00")

func internalTemplateBootBootTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateBootBootTmpl,
		"internal/template/boot/boot.tmpl",
	)
}

func internalTemplateBootBootTmpl() (*asset, error) {
	bytes, err := internalTemplateBootBootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/boot/boot.tmpl", size: 82, mode: os.FileMode(420), modTime: time.Unix(1686111346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateCmdApiserverTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5d\x6f\xdb\x36\x17\xbe\x16\x7f\xc5\x79\x05\xa4\x90\x0a\x5b\xc2\x8b\xdd\x19\xcb\xc5\x90\xe5\x0b\x18\x52\x23\x6e\x77\xd3\x0e\x03\x23\xd1\x32\x11\x89\xd4\xc8\x23\xc7\x41\x60\x20\x6b\xb7\x76\xeb\x52\x6c\xd8\xd2\x5e\x64\x1d\xb0\x02\xfb\x08\x76\xd1\x74\xe8\x80\xa2\xc3\xba\xfe\x98\xd5\x89\xfd\x2f\x06\x8a\xb2\xe3\xa6\x1f\x70\xe6\x0b\x89\x12\x1f\x3d\x3c\xe7\x39\xcf\x21\x9d\xd3\x68\x93\x26\x0c\x68\xce\x09\xe1\x59\x2e\x15\x82\x47\x1c\xb7\x9d\xa1\x4b\x1c\x25\x0b\xe4\x22\x01\x37\xe1\xd8\x29\x36\x82\x48\x66\x61\x92\x6e\xd7\x3b\xc5\x46\xd8\xa6\x1a\x3b\x88\x79\xbd\x02\xb9\xc4\x71\x77\x76\x20\x68\x5a\xc6\x35\x9a\x31\xe8\xf7\x43\x2e\x90\x29\x41\xd3\xd0\xc0\x98\x01\xbd\x86\x2b\x91\xf5\x98\x8a\x98\xa5\x5c\x8a\x90\xe6\x79\xca\x23\x8a\x5c\x8a\x59\xe0\x91\x14\x6d\x9e\xcc\x82\x4c\x65\x92\x30\x35\x0b\x12\xa5\x4c\x75\xc8\xf3\xd9\xb1\x1a\x15\x17\x49\xef\xcc\x07\x3a\x6f\xff\xff\x9d\x30\x92\x1b\x8a\x9a\x19\x2e\x43\x6e\xc4\x4a\xcd\x83\xd4\xf6\x1a\x6a\x9e\x08\x9a\xba\xc4\x27\xa4\x4b\x95\x51\x9f\x89\x2e\x94\x3f\xcb\x4a\x9c\x16\x52\x85\x0b\x59\x0c\xf3\x70\xa1\x64\x0b\x16\x64\x96\x51\x11\xef\x10\xc7\xb9\xa2\x59\x03\x26\x3f\x57\x33\xd5\x65\xca\xad\x11\xc7\x69\x75\xa4\xc2\xc9\x9c\x5b\xb2\xc0\x7b\xcd\x55\x98\xc2\x2c\xf6\x68\x96\xa7\x63\x86\xb2\x82\xad\x72\xb6\x2a\x60\x85\x85\x3a\x83\x54\x46\x34\xb5\xc4\x3c\x65\x22\x62\x57\x34\x4d\x58\x03\x50\x15\xcc\xbc\x6d\x2a\xb6\x5e\x88\x06\xb4\x0b\x11\x79\x51\x16\xc3\xc5\x97\x62\xad\x01\x55\x89\x86\xab\x1f\xd9\xac\x7c\x30\xc1\x3b\x9a\x61\x91\x7b\x3e\x71\x9c\xbe\xe1\x58\x2f\xc4\xe2\xec\x0c\x4c\x29\xa9\x2c\x8f\x62\x58\x28\x01\xaa\x10\x13\xb2\xbe\x91\xd4\x50\x01\x17\x1c\xbd\x72\xc1\xb1\x92\x41\x93\x29\xcd\x35\x32\x81\x4b\x29\x4d\xb4\xe7\x07\xad\x92\xf4\x43\xaa\x9a\xde\x05\x26\xba\x35\x70\x99\xe8\xba\xe6\x66\x2e\x55\xf2\xe0\x2e\x8a\xae\xeb\x93\x7e\xc5\x5c\x85\x6f\xa8\xc3\x10\x46\x9f\xdf\x39\x79\xf6\x70\xf0\xc5\x0f\x83\x5f\xbf\x1a\xec\xdd\x23\x8e\x35\x67\xb0\x2a\x38\x2e\x94\x43\x8f\x89\xae\x5f\x62\x07\x7f\xee\x9f\xec\x1f\x4e\x61\xa7\x7c\x5f\x7e\xe0\x59\xdc\xf0\xc9\xd1\xc9\xfe\xef\x53\xb8\xb2\x91\x4a\xc4\xba\x19\x55\xb0\xe3\xc7\x87\x83\x9b\x7b\x83\x9f\xfe\x18\xdd\x38\x8c\xa4\x40\xd6\xc3\xd1\x77\x7f\x0f\x9f\x1c\xbd\x4c\xbc\xce\x12\x93\xb5\x5a\x61\x34\x66\x6a\xc9\xe8\x7c\x3a\x3c\x4d\x6b\x6a\x3a\xc2\x1e\x5c\xac\x7a\x3c\x58\xb0\xcc\x35\x88\x29\x52\xc8\x68\x7e\xd5\x96\x62\x52\x91\x57\x5e\x55\xca\x0c\x6f\xfd\x36\x78\x78\xf0\xe2\xe9\x97\x36\x42\x1b\xda\x3f\xbb\xd7\x87\x47\x3f\x1f\xdf\x7b\x7a\xfc\xf8\xee\xf0\xc6\xb3\xc1\xa3\x9b\xa3\xfb\xbb\xc3\x5f\x3e\x3d\x39\xf8\x6c\xf0\xf5\xf5\xe3\xbb\x8f\x46\xbb\x07\xc3\xe7\xb7\x54\x1e\x0d\x9f\x7f\x3f\x7c\xb0\xf7\xe2\xaf\x1f\x47\xbb\xdf\xc2\xe5\x4b\xef\x5f\x22\x64\x5c\x71\x13\xc9\x24\xee\xb2\xfc\xa7\xb6\x30\x32\x7f\x73\x34\xb8\x7d\x68\x36\xaa\xe3\xfb\x77\x06\xb7\x1f\x10\x27\x91\xd6\x5f\xd6\x80\xd3\xe2\xac\x20\xe6\xd6\xfc\xc6\x0e\xd5\x80\x38\x7d\x73\x29\x35\x15\x58\x83\x8f\xa1\x31\x0f\xb6\x8d\x83\x75\x46\xe3\x25\x9e\x32\xcf\x0d\x42\x8d\x14\x79\x34\xd9\xef\xea\x09\x45\xb6\x45\xb7\x03\xec\xa1\xeb\x13\xa7\x9d\x61\xd0\x54\x5c\x60\x2a\x3c\xbb\x11\x05\xcb\x8a\x31\xe1\x59\x99\xbc\x8a\xdf\xf7\x7d\x62\x1a\xf1\x8d\x70\xd7\xc6\x65\x32\x05\x8a\x0d\xf7\x2c\xbe\xed\xb9\x75\x80\x0f\x8c\x5b\x4d\x4f\x9b\xc4\x1b\x61\x58\xba\xb7\x23\x35\x36\xe6\xe2\x10\xae\xa9\x6b\xc2\xad\xc1\x1b\x53\x6f\x4a\x85\xde\xeb\x89\xd7\x18\x6e\x49\xb5\xd9\x18\x13\xcf\xe9\x69\x46\x9e\x07\xcb\x0c\xcb\xc5\x57\xa4\x46\xcf\x3f\xef\x22\xa9\xe9\x5e\xf3\x86\xb7\xa1\xea\x9d\x65\x86\x8b\xa2\xeb\xf9\xf0\xbf\x79\x70\x73\x25\xe3\x22\x2a\x8f\x06\xd8\x21\xe3\x9d\xed\x2d\x62\x6d\x51\xf3\x78\x56\xad\xf3\x2a\x46\x73\x1e\x6a\x4b\x15\x72\x11\xb3\x5e\xd0\xc1\x2c\x3d\x97\x8e\x33\x6b\xf9\xf6\xb5\xfe\xab\xc2\x7d\x52\xde\x3e\x29\x38\x1a\xff\x66\x74\x93\x79\x51\x87\x0a\x90\x3a\x68\x95\x07\x90\xc5\xd9\xc3\x28\x58\x93\xc8\xdb\xdb\x9e\x81\xd7\x0c\x64\xd5\xb8\x5a\x15\x39\x5a\xd4\xbb\x75\x33\xf3\x8a\x3f\xe6\x34\xb4\x3a\x05\xc6\x72\x4b\x40\x65\xd3\x20\x08\xc6\xa1\x57\x47\xa4\x89\x7f\xa1\x50\x8a\x09\xbc\xcc\x33\xd6\x42\x35\x8e\xb1\x2a\xdd\xaa\x68\xcb\x89\xcd\x59\x8f\x97\x7f\x2e\x2c\xa2\x6a\x79\xc1\x53\xd2\x27\xff\x06\x00\x00\xff\xff\x7d\x8d\x8b\x0a\xbb\x08\x00\x00")

func internalTemplateCmdApiserverTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateCmdApiserverTmpl,
		"internal/template/cmd/apiserver.tmpl",
	)
}

func internalTemplateCmdApiserverTmpl() (*asset, error) {
	bytes, err := internalTemplateCmdApiserverTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/cmd/apiserver.tmpl", size: 2235, mode: os.FileMode(420), modTime: time.Unix(1686118190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateCmdCobraTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x8f\xd3\x30\x10\x85\xcf\x9e\x5f\x31\xe4\x80\x12\xd4\x26\xaa\xb8\x05\x7a\x58\xad\x7a\x43\xab\x6a\xab\x3d\x21\x0e\xae\x3d\x75\x2d\x62\x3b\x8c\xed\x65\x21\xca\x7f\x47\x4e\x4b\x05\x2b\x4e\x5c\xe7\x7b\xf3\xde\xd3\xcc\x28\xd5\x57\x69\x08\x95\xd3\x00\xd6\x8d\x81\x13\xd6\x20\x2a\x62\x0e\x1c\x2b\x10\xd5\x34\x61\xbb\xbf\xa8\x1e\xa4\x23\x9c\xe7\x4e\x39\xdd\xc9\xd1\x16\x6a\x6c\x3a\xe7\x63\xab\x82\xeb\xcc\xf0\x63\x7d\xce\xc7\xce\x84\xb5\x96\x5e\xd3\x60\x83\xef\x86\x60\x0c\xf1\x2b\x65\x1c\x4f\x9b\xf7\x9d\x0a\x47\x96\x85\x84\x58\x41\x03\xf0\x2c\x19\x39\x84\x74\xef\x34\x6e\xf1\xed\x82\xdb\xfb\xe0\x9c\xf4\x7a\x02\xf1\x14\xa9\xc7\x7f\xb4\xa9\x56\x20\x0e\xe7\xc0\xe9\x4a\x0f\xc4\xcf\xc4\x7f\x42\x3b\x90\x57\xf4\x14\xa5\xa1\x3e\x71\xa6\x15\x88\x4f\xc1\x9b\x1e\x2b\x99\xd3\x39\xb0\xfd\x49\x45\x77\xc7\x26\xf6\x78\xca\x5e\xd5\xca\x69\x7c\xf7\x57\x81\x15\x4a\x36\x11\x3f\x7f\x89\x89\xad\x37\x0d\x2e\x07\xc2\x09\x84\xb0\x27\x1c\xc8\xd7\x85\x37\xf8\x11\x37\xcb\x50\x30\xa5\xcc\xfe\x22\x8b\xed\x03\x7d\xaf\x2f\xa7\x68\x1f\x49\xd7\x15\xd3\xb7\x6c\x99\x22\xca\x84\x03\xc9\x98\x30\x78\x2a\x11\x55\xd3\x80\x10\x33\xdc\x0c\xbc\x1d\x40\xcc\x2b\x10\x7b\xe2\x68\x63\x22\x9f\xf6\x21\xa6\xc7\xec\x77\xff\x53\xf6\x95\xeb\x0c\x50\x3c\xd0\x7a\x9b\xea\x66\x02\x71\x7d\x40\x7b\xa7\xf5\xd5\xac\x96\xa3\x6d\x0f\x49\x72\x99\x37\xb7\x8d\xdd\x0b\xa9\x9c\x68\x59\xb2\xa7\x92\x80\xfd\xf6\xf7\xff\xda\x1b\xfd\xb0\x90\x37\xdb\x92\x58\xf2\x43\x6c\x77\x2f\x36\xd5\xeb\x4d\x03\x62\x86\x19\x7e\x05\x00\x00\xff\xff\xda\xd0\x84\x07\x81\x02\x00\x00")

func internalTemplateCmdCobraTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateCmdCobraTmpl,
		"internal/template/cmd/cobra.tmpl",
	)
}

func internalTemplateCmdCobraTmpl() (*asset, error) {
	bytes, err := internalTemplateCmdCobraTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/cmd/cobra.tmpl", size: 641, mode: os.FileMode(420), modTime: time.Unix(1686118345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateCmdRpcserverTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xbf\x8f\x1b\x45\x14\xc7\xeb\x99\xbf\xe2\x69\xa4\x44\xb3\xc8\x37\x2b\x44\x77\x22\x05\xb2\x2e\xd1\x35\x91\x65\x13\x1a\x82\xd0\xdc\xfa\xed\x7a\x94\xd9\x37\xcb\xcc\x5b\xc7\xd1\xc9\x25\x12\x02\xd2\x85\x54\x50\x50\x41\x45\x43\x05\x12\x7f\x8e\x2f\xe2\xbf\x40\xb3\xbb\x3e\x0c\x52\x24\x6f\xb1\xb6\xe7\x7d\xe7\xf3\x7e\xbb\xb3\xd5\x0b\xdb\x20\xd8\xce\x49\xe9\xda\x2e\x44\x06\x2d\x85\xaa\x5b\x56\x52\xa8\xdb\x5b\x30\x8b\x51\xf2\xd4\xb6\x08\xfb\x7d\x79\x13\xc2\xfb\x4c\x8e\x18\x23\x59\x5f\x26\x8c\x5b\x57\x61\x96\x35\x8e\x37\xfd\x8d\xa9\x42\x5b\x36\xfe\xd5\xc5\xa6\xbf\x29\x9b\x70\xb1\xb6\xb4\x46\xef\x02\x95\xb6\xeb\xbc\xab\x2c\xbb\x40\xe7\xc8\xab\x40\xb5\x6b\xce\x51\xfa\xd0\x34\x18\xcf\x51\x72\x08\x3e\x95\x89\xa3\xa3\x66\xf7\xbf\x0b\xa9\xab\x3f\xfc\xa8\xac\xc2\x4d\xb4\xd9\xe2\x42\xe9\x42\xcf\xce\xe7\x1f\x21\x8d\xef\x32\xb9\x86\xac\x57\xb2\x90\x72\x6b\x63\xae\x1f\xd2\x16\x86\x67\xa4\x4a\xb1\x62\x1b\x79\xde\xae\xe1\x11\x3c\x1c\x68\x66\x1e\xda\xd6\xd2\xfa\x56\x0a\xf1\x2c\xe1\x25\xdc\x3f\x2a\x57\x0f\xa3\x9a\x49\x21\x56\x9b\x10\xf9\xde\xa6\x06\x0a\x2c\x17\x73\x38\xd1\x5c\xed\x6c\xdb\xf9\x23\x61\xe8\xcb\x6a\xb0\x4e\x6d\x99\xb4\x70\x81\xe0\x43\x65\xfd\x08\x76\x1e\xa9\xc2\x67\xc9\x36\x78\x09\x1c\x7b\xcc\xa7\x8b\x88\xcb\x9e\x2e\xa1\xee\xa9\xd2\x55\xbb\x86\x0f\xfe\x13\xeb\x0c\x6c\x6c\x12\x7c\xfe\xc5\x98\x55\x01\x39\x78\x91\x90\xfb\x4e\x17\x52\x88\x7d\x66\x2c\x7b\xba\x3a\x9f\x80\x31\x86\x38\x72\x22\x72\x1f\x09\x62\x4f\xf7\xb0\x7d\x2e\x69\x46\x81\x23\xc7\x7a\x70\x78\xac\xa4\x59\x60\x4c\x2e\x31\x12\x3f\xf6\xb6\x49\xba\x30\xab\x01\xfa\x99\x8d\x0b\xfd\x10\x69\x3b\x03\x85\xb4\x55\xf9\x23\xbf\xa6\xe4\x41\x5d\xd1\x56\x15\x72\x3f\x91\xa7\xf0\x33\xba\x2c\xe1\xef\xaf\x5f\xbf\xfb\xeb\xb7\xc3\x37\x3f\x1d\x7e\xf9\xee\xf0\xfd\x5b\x29\xc6\x81\x33\xd7\xe4\x78\x3e\x7c\xd5\x48\xdb\x62\xd0\x1e\xfe\x7c\xf3\xee\xcd\xaf\x27\xda\x93\x59\x1e\x2e\xe8\x49\x77\x54\xdc\xfd\xf8\xfa\xf0\xed\xcf\x77\x6f\xff\xb8\xfb\xfd\x07\x29\xf2\x22\x1d\x65\xc7\x60\x86\xe4\xff\x2d\xca\xe9\xe5\xd8\x55\xd0\x86\x35\x7a\x29\x9a\x30\xd6\x77\x6c\xc0\xa9\xd7\x65\x57\x8d\xbd\xd7\x84\x2f\xf5\xb4\x86\xf9\xf4\x93\xce\x15\x85\x14\xfb\x1c\x52\x15\x28\x57\x6d\x06\x5f\xc2\xe5\x23\x18\xe7\xd9\x2c\xd1\xae\x1f\x3b\x8f\x5a\x99\x32\xb1\x65\x57\x95\x0f\x92\xe1\x1d\xab\x42\x8a\xba\x65\xb3\x88\x8e\xd8\x93\x1e\xf7\xca\x3c\x89\x88\xa4\xc7\x36\xea\x89\x58\x64\x17\x5f\xf5\x8e\x33\xb7\xb5\x2f\x50\x57\x1b\x4b\x10\x92\x59\x0d\x1b\x52\x48\x31\xae\x8a\x79\x1a\xd8\xd5\xaf\x74\xd6\xce\xb2\xfd\x3a\xff\x73\xc4\xbe\xe3\x42\x8a\x8f\x2f\xf2\xf1\x89\xd3\x5a\xab\x07\x09\x56\x9b\x9e\xd7\xe1\x25\xc1\x98\x20\x18\x63\xe0\x79\x7c\x4e\x6a\x36\x2d\xd9\xce\x3c\x41\x9e\xf7\x31\x22\xf1\xa7\xae\xc5\x15\x47\x5d\x14\x32\x2f\xc5\x14\xf3\x35\xd5\x41\xab\xe9\x3e\xee\x1c\x3b\x6a\xd4\xa8\x98\x86\x8f\x9c\x97\x7b\xf9\x4f\x00\x00\x00\xff\xff\x5a\xdb\x02\x13\x15\x05\x00\x00")

func internalTemplateCmdRpcserverTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateCmdRpcserverTmpl,
		"internal/template/cmd/rpcserver.tmpl",
	)
}

func internalTemplateCmdRpcserverTmpl() (*asset, error) {
	bytes, err := internalTemplateCmdRpcserverTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/cmd/rpcserver.tmpl", size: 1301, mode: os.FileMode(420), modTime: time.Unix(1686118215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateConfigConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\xcf\x6e\x13\x3f\x10\xc7\xef\xfb\x14\x23\xff\xce\xbf\x68\x37\x29\x49\xea\x5b\x01\x21\x90\x2a\x40\x6d\x24\x0e\x15\x07\x37\x9e\x34\x2b\x9c\xb5\xb1\x9d\x84\x6a\x65\x89\x0a\x24\xa4\x4a\x08\x90\xe0\x00\x37\x24\x5a\x4e\x55\x38\x70\xe2\xc2\xcb\x40\xba\x7d\x0b\x64\xef\x26\x9b\x96\x94\xd3\xda\x1f\xcf\xf8\x3b\xff\xbc\x79\x0e\xe9\x00\x1a\x3d\x29\x85\x69\x6c\xcb\x83\x03\xd4\xe0\x5c\x24\xc2\x8a\x46\x00\xff\x6d\xe3\x04\x05\xc4\x70\xfe\xfd\xeb\xfc\xf9\xc9\xf9\xa7\x97\x90\x14\x67\xa7\xf3\xe3\x13\x68\x5e\xbc\x7a\x5d\x9c\x1e\x79\xd4\xba\x78\xff\xb1\x98\xcd\x60\xa3\x38\x3b\xfd\xfd\xee\x18\x6e\xcc\xdf\xbc\x3d\xff\xf2\x03\xda\xbf\x7e\x7e\x9e\x1f\xcd\xa0\x53\x7c\x7b\x51\xcc\x3e\x44\x00\x7d\x99\x19\x29\x70\x77\x28\xa7\x14\xac\x1e\x63\xcd\x82\x12\x05\xe8\x44\x00\x83\x54\xe0\x23\x9d\x5a\xa4\x00\x03\x26\x0c\x56\x6c\xd5\x66\x34\x16\x36\xbd\x53\x1b\x2e\xec\x96\xbc\x32\xee\x44\x79\x0e\x98\x71\x9f\x58\x74\x29\xe1\xbb\xd6\x2a\x70\x6e\x68\xad\xda\x45\x3d\x29\x33\x56\x52\x5b\x0a\xdd\xb8\x1b\xfb\x8d\xd2\x72\x10\x76\xdd\xd5\x5b\xb4\xea\xd7\x0e\x23\xc9\xbd\x4c\x12\x01\x98\x00\xef\xb3\x11\x52\x20\x79\x0e\x8d\xdd\x25\x00\xe7\x48\x04\x80\xb6\xcf\x29\xec\x91\xa4\xd9\x69\xc4\x8d\xb8\x91\xd0\x66\xab\xb3\x49\x1e\x47\x00\xfb\xcc\xe0\x43\x66\x87\x95\xeb\x96\x52\xc1\x27\xcf\xeb\x80\x77\x54\xdf\x39\x00\xc6\xb9\xa6\x40\x48\x1d\x6d\x77\x73\xb3\x8e\x36\x09\xdb\x3c\xc7\x8c\x97\x29\xd7\x17\xdc\xbe\xe9\x1c\xdf\xf7\x51\xf3\xfd\xde\xa1\xf2\x61\x8e\x0e\xcd\x53\xe1\xaf\x1a\xb1\x67\x0f\x14\x66\xb7\x64\x96\x51\x68\xc6\x25\xb9\xc7\x05\x96\x64\xa3\x06\xbd\xd4\x27\x98\xc4\x95\xcd\x76\x3a\xa8\x50\xab\x1d\x98\x28\x0b\xef\x3d\x8c\x90\xd3\xde\x50\xa3\x19\x4a\xc1\x29\x90\x24\x8e\x47\xa6\x54\x33\xb6\xac\x1f\xc0\xd8\xa0\xcf\x47\x4b\x69\x49\x00\x8a\x19\x33\x95\xda\x3b\x2c\x96\xe5\xc1\x50\x1a\xeb\x6f\x59\x54\xaf\x32\x0f\x45\x20\xad\x56\xdc\x2e\x01\x67\x96\xf9\x72\x52\x20\x8b\x25\x09\xc1\xb0\x09\x96\x92\xff\xff\x2d\xfa\x0f\xd9\xeb\x84\xd7\x48\x5f\x23\xbe\xb6\x1b\x3b\xc8\x53\xe3\x5c\xa4\xfd\xd7\xc7\x15\x16\x55\x5f\x98\x90\x59\x88\x3a\x43\x3b\x95\xfa\xc9\xaa\x3a\x6d\xfb\xa1\xf1\x19\x59\xa6\xed\x56\x18\x87\xbd\xab\xc7\x7e\xa6\x58\xdf\xa6\x93\x65\xaf\x52\x2e\x96\x6b\x36\x0e\x93\x46\xca\xf7\x97\xf9\xfe\xc9\xb1\x5d\xed\x90\x46\xc6\xd7\xe0\xa9\x7f\x6d\x6b\x78\x5a\x0d\xc6\x25\xbc\x36\xed\x9e\x66\x7d\x74\x2e\xb2\xfe\x1b\x46\x40\x2a\xcc\x02\x5d\xfe\x13\xc2\x59\xf5\x90\xea\x57\xe5\x75\xae\x76\x82\xb6\xbb\xad\xa4\x56\xfa\x13\x00\x00\xff\xff\xdd\x91\xa0\xf9\xd2\x04\x00\x00")

func internalTemplateConfigConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateConfigConfigTmpl,
		"internal/template/config/config.tmpl",
	)
}

func internalTemplateConfigConfigTmpl() (*asset, error) {
	bytes, err := internalTemplateConfigConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/config/config.tmpl", size: 1234, mode: os.FileMode(420), modTime: time.Unix(1686119096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateGlobalGlobalTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\xcf\xc9\x4f\x4a\xcc\xe1\x02\x04\x00\x00\xff\xff\x32\x37\xa5\xbc\x0f\x00\x00\x00")

func internalTemplateGlobalGlobalTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateGlobalGlobalTmpl,
		"internal/template/global/global.tmpl",
	)
}

func internalTemplateGlobalGlobalTmpl() (*asset, error) {
	bytes, err := internalTemplateGlobalGlobalTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/global/global.tmpl", size: 15, mode: os.FileMode(420), modTime: time.Unix(1686108961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateInternalRouteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6b\x1b\x31\x14\x80\x67\xbd\x5f\xa1\x6a\xba\x33\xb5\xb4\x17\x8c\x97\x96\xda\x50\x30\xd8\x85\xce\xf2\x9d\x2c\x8b\x9e\x25\x21\xeb\x5c\x4a\x31\x74\x68\x3d\xb5\x24\x10\x67\x72\xc6\x18\xbc\x04\x13\x3c\x24\x84\x84\xfc\x1a\xc5\xce\xbf\x08\xe7\x73\x82\x33\xc5\xa3\xc4\xf7\xde\xfb\x3e\xcb\x93\xef\x5c\x0a\xec\x4c\xee\x05\x80\x1a\x58\xe3\x3c\x8e\x00\x11\xa9\x7c\x3f\xef\xd2\xc4\x0c\x98\xcc\x7e\x56\xfb\x79\x97\x49\x53\x4d\xb9\x4e\x45\xa6\x8c\x66\xdc\xda\x4c\x25\xdc\x2b\xa3\xc9\x01\x78\x62\x74\x4f\xc9\x43\xc8\xa1\x70\x23\xe1\x58\xdf\x7b\x4b\x00\x15\x62\x4a\xcb\xce\x0f\x2e\xa5\x70\xf8\xed\xe9\x12\x24\x10\x03\xf4\x72\x9d\xe0\xa6\x56\xbe\x5d\xd4\x45\x31\xfe\x05\xa8\xcb\x87\x62\xfb\x74\xf8\x43\x0d\xef\x45\xd0\x86\xf7\xb6\xb3\xbd\x1d\xc5\xb4\x44\xa2\x18\x90\xea\xe1\xd2\x9d\x7e\x16\xfe\x93\x1e\x45\x31\x7e\x57\xc3\xc4\x3a\x93\xe6\xc9\xb6\xbe\x58\x8b\x18\xc3\x0f\xab\x45\x98\xfc\xdb\x09\x00\xda\x3b\x55\x8c\x46\xe4\xd9\x8d\x55\xc8\x7b\xfc\xba\x8b\x7e\x73\xdc\x36\xb8\x4e\x33\xe1\x62\x40\xa8\x88\xa7\x5f\x8c\x6c\x4a\x6d\x9c\x68\x8b\x61\x9e\xf9\x88\xd0\x4a\xfd\x65\x07\xad\xd4\x49\x8c\x19\xc3\xe1\xfe\x6e\x7d\x3a\xdf\x7d\x87\x93\xff\xe1\x66\x1a\x7e\xdf\x02\x1a\x03\x14\x52\xe1\x68\x19\xce\x16\x9b\xe5\x3c\x9c\xff\x29\x05\xd7\xb3\xeb\xf0\x77\x15\x2e\x8e\x1f\x67\x93\xcd\xd5\x72\x3d\xbd\xc4\x5f\x5b\x1f\x5b\x00\xc8\x09\x9f\x3b\x0d\x63\x78\x0a\x00\x00\xff\xff\xb1\xcf\x6a\xbd\x16\x02\x00\x00")

func internalTemplateInternalRouteTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateInternalRouteTmpl,
		"internal/template/internal/route.tmpl",
	)
}

func internalTemplateInternalRouteTmpl() (*asset, error) {
	bytes, err := internalTemplateInternalRouteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/internal/route.tmpl", size: 534, mode: os.FileMode(420), modTime: time.Unix(1686108871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateInternalRpcapiTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\x2d\x2a\xcb\x4c\x4e\xe5\xe2\x2a\xa9\x2c\x48\x55\x08\x2a\x48\x76\x2c\xc8\x54\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xe6\xe2\xaa\xe5\x02\x04\x00\x00\xff\xff\xbd\xf9\x40\x98\x29\x00\x00\x00")

func internalTemplateInternalRpcapiTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateInternalRpcapiTmpl,
		"internal/template/internal/rpcapi.tmpl",
	)
}

func internalTemplateInternalRpcapiTmpl() (*asset, error) {
	bytes, err := internalTemplateInternalRpcapiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/internal/rpcapi.tmpl", size: 41, mode: os.FileMode(420), modTime: time.Unix(1686108931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\xaa\xae\x56\xd0\x0b\x80\xc8\xf8\x25\xe6\xa6\x2a\xd4\xd6\xea\x27\xe7\xa6\x28\x71\x71\xa5\x95\xe6\x25\x83\xd5\x6a\x68\x2a\x54\x73\x71\x26\xe7\xa6\xe8\xb9\x56\xa4\x26\x97\x96\xa4\x6a\x68\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x12\xa7\xcc\x37\x4e\x00\x00\x00")

func internalTemplateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateMainTmpl,
		"internal/template/main.tmpl",
	)
}

func internalTemplateMainTmpl() (*asset, error) {
	bytes, err := internalTemplateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/main.tmpl", size: 78, mode: os.FileMode(420), modTime: time.Unix(1686118271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/template/boot/boot.tmpl":       internalTemplateBootBootTmpl,
	"internal/template/cmd/apiserver.tmpl":   internalTemplateCmdApiserverTmpl,
	"internal/template/cmd/cobra.tmpl":       internalTemplateCmdCobraTmpl,
	"internal/template/cmd/rpcserver.tmpl":   internalTemplateCmdRpcserverTmpl,
	"internal/template/config/config.tmpl":   internalTemplateConfigConfigTmpl,
	"internal/template/global/global.tmpl":   internalTemplateGlobalGlobalTmpl,
	"internal/template/internal/route.tmpl":  internalTemplateInternalRouteTmpl,
	"internal/template/internal/rpcapi.tmpl": internalTemplateInternalRpcapiTmpl,
	"internal/template/main.tmpl":            internalTemplateMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"boot": &bintree{nil, map[string]*bintree{
				"boot.tmpl": &bintree{internalTemplateBootBootTmpl, map[string]*bintree{}},
			}},
			"cmd": &bintree{nil, map[string]*bintree{
				"apiserver.tmpl": &bintree{internalTemplateCmdApiserverTmpl, map[string]*bintree{}},
				"cobra.tmpl":     &bintree{internalTemplateCmdCobraTmpl, map[string]*bintree{}},
				"rpcserver.tmpl": &bintree{internalTemplateCmdRpcserverTmpl, map[string]*bintree{}},
			}},
			"config": &bintree{nil, map[string]*bintree{
				"config.tmpl": &bintree{internalTemplateConfigConfigTmpl, map[string]*bintree{}},
			}},
			"global": &bintree{nil, map[string]*bintree{
				"global.tmpl": &bintree{internalTemplateGlobalGlobalTmpl, map[string]*bintree{}},
			}},
			"internal": &bintree{nil, map[string]*bintree{
				"route.tmpl":  &bintree{internalTemplateInternalRouteTmpl, map[string]*bintree{}},
				"rpcapi.tmpl": &bintree{internalTemplateInternalRpcapiTmpl, map[string]*bintree{}},
			}},
			"main.tmpl": &bintree{internalTemplateMainTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
